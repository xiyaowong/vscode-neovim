{
    "name": "vscode-neovim",
    "displayName": "VSCode Neovim",
    "description": "Vim mode for VSCode, powered by Neovim",
    "icon": "images/icon.png",
    "publisher": "asvetliakov",
    "extensionKind": [
        "ui",
        "workspace"
    ],
    "version": "0.9.1",
    "repository": {
        "type": "git",
        "url": "https://github.com/asvetliakov/vscode-neovim"
    },
    "bugs": {
        "url": "https://github.com/asvetliakov/vscode-neovim/issues",
        "email": "devpieron@gmail.com"
    },
    "engines": {
        "vscode": "^1.83.1"
    },
    "keywords": [
        "keybindings",
        "vi",
        "vim",
        "neovim"
    ],
    "categories": [
        "Other",
        "Keymaps"
    ],
    "activationEvents": [
        "*"
    ],
    "main": "./dist/extension.js",
    "contributes": {
        "configuration": {
            "title": "Neovim",
            "properties": {
                "vscode-neovim.neovimPath": {
                    "type": "string",
                    "default": "",
                    "title": "Neovim path",
                    "markdownDescription": "*Windows, OSX, Linux in Neovim path settings won`t work if this setting is set* Full path to Neovim executable. If you have enabled `useWSL` setting, specify the Linux path to nvim executable instead.",
                    "deprecationMessage": "This setting is deprecated. Remove this setting and use neovimExecutablePaths.win32/linux/darwin instead. If you continue to use this setting, keep in mind this setting takes precedence over neovimExecutablePaths.windows/linux/darwin and those settings won't work. If you want them to work, just remove this setting from your settings.json or make its input box in User Settings empty"
                },
                "vscode-neovim.neovimExecutablePaths.win32": {
                    "type": "string",
                    "default": "nvim",
                    "title": "Neovim executable path on Windows",
                    "markdownDescription": "Full path to Neovim executable that should be used by the extension if running VS Code on Windows.  \nExample:  \nC:\\tools\\neovim\\Neovim\\bin\\nvim.exe (if you installed using Chocolatey)  \nIf you want to use Windows Subsystem for Linux, enable the `useWSL` setting and set `neovimExecutablePaths.linux` instead"
                },
                "vscode-neovim.neovimExecutablePaths.darwin": {
                    "type": "string",
                    "default": "nvim",
                    "title": "Neovim executable path on OSX",
                    "description": "Full path to Neovim executable that should be used by the extension if running VS Code on OSX."
                },
                "vscode-neovim.neovimExecutablePaths.linux": {
                    "type": "string",
                    "default": "nvim",
                    "title": "Neovim executable path on Linux (and in WSL)",
                    "markdownDescription": "Full path to Neovim executable that should be used by the extension if running VS Code on Linux or WSL. If `useWSL` setting is checked, vscode-neovim will look for this path in default WSL distro  \nExample:  \n/usr/bin/nvim"
                },
                "vscode-neovim.neovimInitPath": {
                    "type": "string",
                    "default": "",
                    "title": "Custom init.vim path",
                    "description": "Full path to custom neovim init file, equals to startup option -u. If checked useWSL flag specify a Linux path. You can also use exists('g:vscode') in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode",
                    "deprecationMessage": "This setting is deprecated. Use neovimInitVimPaths.win32/linux/darwin instead. If you continue to use this setting, keep in mind this setting takes precedence over neovimInitVimPaths.win32/linux/darwin and those settings won't work. If you want them to work, just remove this setting from your settings.json or make its input box in User Settings empty"
                },
                "vscode-neovim.neovimInitVimPaths.win32": {
                    "type": "string",
                    "default": "",
                    "title": "Custom init.vim path on Windows",
                    "markdownDescription": "Full path to custom neovim init.vim file on Windows, equals to startup option `-u`. If the `useWSL` setting is checked, the value of the `neovimInitVimPaths.linux` setting will be used to find the init.vim file instead. You can also use `exists('g:vscode')` in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode"
                },
                "vscode-neovim.neovimInitVimPaths.darwin": {
                    "type": "string",
                    "default": "",
                    "title": "Custom init.vim path on OSX",
                    "markdownDescription": "Full path to custom neovim init.vim file on OSX, equals to startup option `-u`. You can also use `exists('g:vscode')` in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode"
                },
                "vscode-neovim.neovimInitVimPaths.linux": {
                    "type": "string",
                    "default": "",
                    "title": "Custom init.vim path on Linux",
                    "markdownDescription": "Full path to custom neovim init.vim file on Linux or default WSL distro, equals to startup option `-u`. If the `useWSL` setting is checked, this path will be used to find `init.vim` in Windows Subsystem for Linux. You can also use `exists('g:vscode')` in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode"
                },
                "vscode-neovim.neovimClean": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Equivalent to the startup option `--clean`."
                },
                "vscode-neovim.NVIM_APPNAME": {
                    "type": "string",
                    "default": "",
                    "markdownDescription": "See `:h NVIM_APPNAME`."
                },
                "vscode-neovim.neovimWidth": {
                    "type": "number",
                    "default": 1000,
                    "title": "Neovim width",
                    "description": "Neovim viewport width. Increase if you're working with long lines and have horizontal scroll problems. Larger values will affect neovim performance"
                },
                "vscode-neovim.completionDelay": {
                    "type": "number",
                    "default": 1500,
                    "title": "Completion Delay",
                    "description": "The delay in ms until the wildmenu completions are shown. This is to not bother you when you write :w or :noh."
                },
                "vscode-neovim.neovimViewportHeightExtend": {
                    "type": "number",
                    "default": 1,
                    "title": "Neovim viewport height extend",
                    "description": "How much to extend neovim viewport on each side beyond vscode editor size. Increase if you are not seeing decorations or highlights on the edges of the editor."
                },
                "vscode-neovim.useCtrlKeysForNormalMode": {
                    "deprecationMessage": "Use vscode-neovim.ctrlKeysForNormalMode instead (Set it to empty)",
                    "type": "boolean",
                    "default": true,
                    "description": "Use Ctrl keys in normal/visual/etc...(except insert) modes"
                },
                "vscode-neovim.useCtrlKeysForInsertMode": {
                    "deprecationMessage": "Use vscode-neovim.ctrlKeysForInsertMode instead (Set it to empty)",
                    "type": "boolean",
                    "default": true,
                    "description": "Use Ctrl keys in insert mode"
                },
                "vscode-neovim.ctrlKeysForNormalMode": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "enum": [
                            "a",
                            "b",
                            "c",
                            "d",
                            "e",
                            "f",
                            "g",
                            "h",
                            "i",
                            "j",
                            "k",
                            "l",
                            "m",
                            "n",
                            "o",
                            "p",
                            "q",
                            "r",
                            "s",
                            "t",
                            "u",
                            "v",
                            "w",
                            "x",
                            "y",
                            "z",
                            "/",
                            "]",
                            "right",
                            "left",
                            "up",
                            "down",
                            "backspace",
                            "delete"
                        ]
                    },
                    "default": [
                        "a",
                        "b",
                        "c",
                        "d",
                        "e",
                        "f",
                        "h",
                        "i",
                        "j",
                        "k",
                        "l",
                        "o",
                        "r",
                        "t",
                        "u",
                        "v",
                        "w",
                        "x",
                        "y",
                        "z",
                        "/",
                        "]",
                        "right",
                        "left",
                        "up",
                        "down",
                        "backspace",
                        "delete"
                    ],
                    "description": "Enabled Ctrl keys in normal/visual/etc...(except insert) modes"
                },
                "vscode-neovim.ctrlKeysForInsertMode": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string",
                        "enum": [
                            "a",
                            "b",
                            "c",
                            "d",
                            "e",
                            "f",
                            "g",
                            "h",
                            "i",
                            "j",
                            "k",
                            "l",
                            "m",
                            "n",
                            "o",
                            "p",
                            "q",
                            "r",
                            "s",
                            "t",
                            "u",
                            "v",
                            "w",
                            "x",
                            "y",
                            "z",
                            "/",
                            "]",
                            "right",
                            "left",
                            "up",
                            "down",
                            "backspace",
                            "delete"
                        ]
                    },
                    "default": [
                        "a",
                        "c",
                        "d",
                        "h",
                        "j",
                        "o",
                        "r",
                        "t",
                        "u",
                        "w"
                    ],
                    "description": "Enabled Ctrl keys in insert mode"
                },
                "vscode-neovim.editorLangIdExclusions": {
                    "type": "array",
                    "uniqueItems": true,
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "Will disable all keyboard shortcuts when the current editorLangId is in the list"
                },
                "vscode-neovim.useWSL": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Use neovim installed in [default WSL distro](https://learn.microsoft.com/en-us/windows/wsl/basic-commands#run-a-specific-linux-distribution-from-powershell-or-cmd). If you enable this setting, specify the path to the neovim executable installed in WSL `neovimExecutablePaths.linux` setting. "
                },
                "vscode-neovim.revealCursorScrollLine": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "If 'true' reveals the cursor when scrolling by line and if it is outside view port"
                },
                "vscode-neovim.logPath": {
                    "type": "string",
                    "default": "",
                    "description": "Log file path"
                },
                "vscode-neovim.logLevel": {
                    "type": "string",
                    "default": "error",
                    "enum": [
                        "none",
                        "error",
                        "warn",
                        "debug"
                    ],
                    "description": "Log Level"
                },
                "vscode-neovim.logOutputToConsole": {
                    "type": "boolean",
                    "default": false,
                    "description": "When on, print log messages to vscode developer console (not output channel!)"
                },
                "vscode-neovim.highlightGroups.highlights": {
                    "type": "object",
                    "title": "Highlight Groups Configuration",
                    "description": "Define colors for various VIM highlight groups. Values are text decoration properties object",
                    "additionalProperties": {
                        "type": "object",
                        "properties": {
                            "backgroundColor": {
                                "type": "string",
                                "description": "CSS styling property that will be applied to the decoration attachment"
                            },
                            "color": {
                                "type": "string",
                                "description": "CSS styling property that will be applied to the decoration attachment"
                            },
                            "border": {
                                "type": "string",
                                "description": "CSS styling property that will be applied to the decoration attachment"
                            },
                            "borderColor": {
                                "type": "string",
                                "description": "CSS styling property that will be applied to the decoration attachment"
                            },
                            "textDecoration": {
                                "type": "string",
                                "description": "CSS styling property that will be applied to the decoration attachment"
                            }
                        }
                    },
                    "default": {
                        "IncSearch": {
                            "backgroundColor": "theme.editor.findMatchBackground",
                            "borderColor": "theme.editor.findMatchBorder"
                        },
                        "CurSearch": {
                            "backgroundColor": "theme.editor.findMatchBackground",
                            "borderColor": "theme.editor.findMatchBorder"
                        },
                        "Search": {
                            "backgroundColor": "theme.editor.findMatchHighlightBackground",
                            "borderColor": "theme.editor.findMatchHighlightBorder"
                        },
                        "Visual": {
                            "backgroundColor": "theme.editor.selectionBackground"
                        }
                    }
                },
                "vscode-neovim.normalSelectionDebounceTime": {
                    "type": "integer",
                    "minimum": 20,
                    "maximum": 100,
                    "default": 50,
                    "description": "Debounce time used to synchronize selection from VSCode to Nvim, typically referring to cursor movement"
                },
                "vscode-neovim.mouseSelectionDebounceTime": {
                    "default": 100,
                    "enum": [
                        0,
                        50,
                        100,
                        150,
                        200
                    ],
                    "enumDescriptions": [
                        "Disable mouse selection sync",
                        "50ms",
                        "100ms",
                        "150ms",
                        "200ms"
                    ],
                    "description": "Debounce time for synchronizing mouse selection. Set to 0 to disable synchronization"
                },
                "vscode-neovim.statusLineSeparator": {
                    "type": "string",
                    "default": "|",
                    "description": "Separator used by statusline"
                }
            }
        },
        "commands": [
            {
                "command": "vscode-neovim.restart",
                "title": "Neovim: Restart Extension"
            },
            {
                "command": "vscode-neovim.stop",
                "title": "Neovim: Stop Extension"
            },
            {
                "command": "vscode-neovim.send",
                "title": "Neovim: send key to neovim, syncing if in insert mode"
            },
            {
                "command": "vscode-neovim.send-blocking",
                "title": "Neovim: send multiple keys to neovim, used for insert mode paste"
            },
            {
                "command": "vscode-neovim.escape",
                "title": "Neovim send escape key to neovim, or other keys that will exit insert mode"
            },
            {
                "command": "vscode-neovim.compositeEscape1",
                "title": "Composite escape key 1"
            },
            {
                "command": "vscode-neovim.compositeEscape2",
                "title": "Composite escape key 2"
            },
            {
                "command": "vscode-neovim.commit-cmdline",
                "title": "Neovim: Accept cmdline"
            },
            {
                "command": "vscode-neovim.complete-selection-cmdline",
                "title": "Neovim: Complete selection cmdline"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "title": "Neovim: Send key in cmdline"
            },
            {
                "command": "vscode-neovim.ctrl-b",
                "title": "Neovim: ctrl-b"
            },
            {
                "command": "vscode-neovim.ctrl-d",
                "title": "Neovim: ctrl-d"
            },
            {
                "command": "vscode-neovim.ctrl-e",
                "title": "Neovim: ctrl-e"
            },
            {
                "command": "vscode-neovim.ctrl-f",
                "title": "Neovim: ctrl-f"
            },
            {
                "command": "vscode-neovim.ctrl-u",
                "title": "Neovim: ctrl-u"
            },
            {
                "command": "vscode-neovim.ctrl-y",
                "title": "Neovim: ctrl-y"
            },
            {
                "command": "vscode-neovim.shift-m",
                "title": "Neovim: shift-m"
            },
            {
                "command": "vscode-neovim.shift-l",
                "title": "Neovim: shift-l"
            },
            {
                "command": "vscode-neovim:shift-h",
                "title": "Neovim: shift-h"
            }
        ],
        "keybindings": [
            {
                "command": "vscode-neovim.escape",
                "key": "ctrl+[",
                "when": "editorTextFocus && neovim.init && editorLangId not in neovim.editorLangIdExclusions"
            },
            {
                "command": "vscode-neovim.escape",
                "key": "ctrl+c",
                "when": "editorTextFocus && neovim.init && editorLangId not in neovim.editorLangIdExclusions && neovim.mode == normal && neovim.ctrlKeysNormal.c && !markersNavigationVisible && !parameterHintsVisible && !inReferenceSearchEditor && !referenceSearchVisible && !dirtyDiffVisible && !notebookCellFocused && !findWidgetVisible && !notificationCenterVisible"
            },
            {
                "command": "vscode-neovim.escape",
                "key": "ctrl+c",
                "when": "editorTextFocus && neovim.init && editorLangId not in neovim.editorLangIdExclusions && neovim.mode != normal && neovim.ctrlKeysInsert.c"
            },
            {
                "command": "vscode-neovim.escape",
                "key": "Escape",
                "when": "editorTextFocus && neovim.init && editorLangId not in neovim.editorLangIdExclusions && neovim.mode == normal && !markersNavigationVisible && !parameterHintsVisible && !inReferenceSearchEditor && !referenceSearchVisible && !dirtyDiffVisible && !notebookCellFocused && !findWidgetVisible && !notificationCenterVisible"
            },
            {
                "command": "vscode-neovim.escape",
                "key": "Escape",
                "when": "editorTextFocus && neovim.init && editorLangId not in neovim.editorLangIdExclusions && neovim.mode != normal"
            },
            {
                "command": "vscode-neovim.send",
                "key": "backspace",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<BS>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "shift+backspace",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<S-BS>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "delete",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<Del>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "shift+delete",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<S-Del>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "tab",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<tab>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "shift+tab",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<S-tab>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "down",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<down>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "up",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<up>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "left",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<left>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "right",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<right>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "shift+down",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<S-down>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "shift+up",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<S-up>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "shift+left",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<S-left>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "shift+right",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<S-right>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "home",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<home>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "end",
                "when": "neovim.init && (editorTextFocus && neovim.mode != insert && editorLangId not in neovim.editorLangIdExclusions || neovim.recording)",
                "args": "<end>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+a",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.a && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-a>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+b",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.b && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-b>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+d",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.d && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-d>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+e",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.e && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-e>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+f",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.f && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-f>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+g",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.g && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-g>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+h",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.h && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-h>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+i",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.i && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-i>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+j",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.j && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-j>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+k",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.k && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-k>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+l",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.l && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-l>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+m",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.m && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-m>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+n",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.n && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-n>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+o",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.o && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-o>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+p",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.p && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-p>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+q",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.q && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-q>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+r",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.r && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-r>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+s",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.s && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-s>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+t",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.t && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-t>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+u",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.u && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-u>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+v",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.v && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-v>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+w",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.w && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-w>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+x",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.x && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-x>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+y",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.y && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-y>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+z",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.z && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-z>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+/",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal./ && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-/>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+]",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.] && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-]>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+right",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.right && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-right>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+left",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.left && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-left>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+up",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.up && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-up>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+down",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.down && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-down>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+backspace",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.backspace && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-BS>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+delete",
                "when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal.delete && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-Del>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+a",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.a && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-a>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+b",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.b && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-b>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+d",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.d && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-d>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+e",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.e && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-e>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+f",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.f && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-f>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+g",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.g && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-g>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+h",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.h && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-h>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+i",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.i && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-i>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+j",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.j && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-j>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+k",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.k && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-k>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+l",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.l && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-l>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+m",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.m && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-m>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+n",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.n && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-n>"
            },
            {
                "command": "vscode-neovim.escape",
                "key": "ctrl+o",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.o && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-o>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+p",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.p && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-p>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+q",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.q && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-q>"
            },
            {
                "command": "vscode-neovim.send-blocking",
                "key": "ctrl+r",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.r && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-r>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+s",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.s && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-s>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+t",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.t && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-t>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+u",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.u && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-u>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+v",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.v && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-v>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+w",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.w && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-w>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+x",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.x && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-x>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+y",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.y && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-y>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+z",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.z && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-z>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+/",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert./ && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-/>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+]",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.] && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-]>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+right",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.right && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-right>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+left",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.left && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-left>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+up",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.up && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-up>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+down",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.down && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-down>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+backspace",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.backspace && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-BS>"
            },
            {
                "command": "vscode-neovim.send",
                "key": "ctrl+delete",
                "when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert.delete && editorLangId not in neovim.editorLangIdExclusions",
                "args": "<C-Del>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+h",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-h>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+w",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-w>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+u",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-u>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+n",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<Down>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+p",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<Up>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+l",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-l>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+g",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-g>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+t",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-t>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+up",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-up>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+down",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-down>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 0",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>0"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 1",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>1"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 2",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>2"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 3",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>3"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 4",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>4"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 5",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>5"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 6",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>6"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 7",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>7"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 8",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>8"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r 9",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>9"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+0",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>)"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+1",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>!"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+2",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>@"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+3",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>#"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+4",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>$"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+5",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>%"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+6",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>^"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+7",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>&"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+8",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>*"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+9",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>("
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+'",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>\""
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift++",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>="
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+-",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>_"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+=",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>+"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+;",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>:"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+,",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+.",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+/",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>?"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+`",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>~"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+[",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>{"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r shift+]",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>}"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+a",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-a>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+b",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-b>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+c",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-c>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+d",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-d>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+e",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-e>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+f",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-f>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+g",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-g>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+h",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-h>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+i",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-i>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+j",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-j>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+k",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-k>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+l",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-l>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+m",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-m>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+n",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-n>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+o",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-o>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+p",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-p>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+q",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-q>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+r",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-r>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+s",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-s>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+t",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-t>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+u",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-u>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+v",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-v>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+w",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-w>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+x",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-x>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+y",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-y>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+z",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-z>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r ctrl+]",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r><C-]>"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r /",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>/"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r -",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>-"
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r .",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>."
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+r =",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-r>="
            },
            {
                "command": "vscode-neovim.send-cmdline",
                "key": "ctrl+\\ e",
                "when": "neovim.init && neovim.mode == cmdline",
                "args": "<C-\\>e"
            },
            {
                "command": "vscode-neovim.complete-selection-cmdline",
                "key": "tab",
                "when": "neovim.init && neovim.mode == cmdline"
            },
            {
                "key": "j",
                "command": "list.focusDown",
                "when": "listFocus && !inputFocus"
            },
            {
                "key": "k",
                "command": "list.focusUp",
                "when": "listFocus && !inputFocus"
            },
            {
                "key": "h",
                "command": "list.collapse",
                "when": "listFocus && !inputFocus"
            },
            {
                "key": "l",
                "command": "list.select",
                "when": "listFocus && !inputFocus"
            },
            {
                "key": "enter",
                "command": "list.select",
                "when": "listFocus && !inputFocus && !notebookCellListFocused"
            },
            {
                "key": "g g",
                "command": "list.focusFirst",
                "when": "listFocus && !inputFocus"
            },
            {
                "key": "shift+g",
                "command": "list.focusLast",
                "when": "listFocus && !inputFocus"
            },
            {
                "key": "o",
                "command": "list.toggleExpand",
                "when": "listFocus && !inputFocus"
            },
            {
                "key": "ctrl+u",
                "command": "list.focusPageUp",
                "when": "listFocus && !inputFocus"
            },
            {
                "key": "ctrl+d",
                "command": "list.focusPageDown",
                "when": "listFocus && !inputFocus"
            },
            {
                "key": "/",
                "command": "list.find",
                "when": "listFocus && listSupportsFind && !inputFocus"
            },
            {
                "key": "enter",
                "command": "list.closeFind",
                "when": "listFocus && treeFindOpen && inputFocus"
            },
            {
                "key": "r",
                "command": "renameFile",
                "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
            },
            {
                "key": "d",
                "command": "deleteFile",
                "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
            },
            {
                "key": "y",
                "command": "filesExplorer.copy",
                "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
            },
            {
                "key": "x",
                "command": "filesExplorer.cut",
                "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
            },
            {
                "key": "p",
                "command": "filesExplorer.paste",
                "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
            },
            {
                "key": "v",
                "command": "explorer.openToSide",
                "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
            },
            {
                "key": "a",
                "command": "explorer.newFile",
                "when": "filesExplorerFocus && !inputFocus"
            },
            {
                "key": "shift+a",
                "command": "explorer.newFolder",
                "when": "filesExplorerFocus && !inputFocus"
            },
            {
                "key": "z o",
                "command": "list.expand",
                "when": "!editorTextFocus && !inputFocus"
            },
            {
                "key": "z shift+o",
                "command": "list.expand",
                "when": "!editorTextFocus && !inputFocus"
            },
            {
                "key": "z c",
                "command": "list.collapse",
                "when": "!editorTextFocus && !inputFocus"
            },
            {
                "key": "z shift+c",
                "command": "list.collapseAllToFocus",
                "when": "!editorTextFocus && !inputFocus"
            },
            {
                "key": "z a",
                "command": "list.toggleExpand",
                "when": "!editorTextFocus && !inputFocus"
            },
            {
                "key": "z shift+a",
                "command": "list.toggleExpand",
                "when": "!editorTextFocus && !inputFocus"
            },
            {
                "key": "z m",
                "command": "list.collapseAll",
                "when": "!editorTextFocus && !inputFocus"
            },
            {
                "key": "z shift+m",
                "command": "list.collapseAll",
                "when": "!editorTextFocus && !inputFocus"
            },
            {
                "key": "tab",
                "command": "togglePeekWidgetFocus",
                "when": "inReferenceSearchEditor && neovim.mode == normal || referenceSearchVisible"
            },
            {
                "key": "ctrl+n",
                "command": "list.focusDown",
                "when": "inReferenceSearchEditor && neovim.mode == normal"
            },
            {
                "key": "ctrl+p",
                "command": "list.focusUp",
                "when": "inReferenceSearchEditor && neovim.mode == normal"
            },
            {
                "command": "list.focusDown",
                "key": "ctrl+n",
                "when": "listFocus && !inputFocus"
            },
            {
                "command": "list.focusUp",
                "key": "ctrl+p",
                "when": "listFocus && !inputFocus"
            },
            {
                "command": "showNextParameterHint",
                "key": "ctrl+n",
                "when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
            },
            {
                "command": "showPrevParameterHint",
                "key": "ctrl+p",
                "when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
            },
            {
                "key": "ctrl+n",
                "command": "selectNextSuggestion",
                "when": "textInputFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
            },
            {
                "key": "ctrl+p",
                "command": "selectPrevSuggestion",
                "when": "textInputFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
            },
            {
                "command": "workbench.action.quickOpenSelectNext",
                "key": "ctrl+n",
                "when": "inQuickOpen && (neovim.mode != cmdline || neovim.wildMenuVisible)"
            },
            {
                "command": "workbench.action.quickOpenSelectPrevious",
                "key": "ctrl+p",
                "when": "inQuickOpen && (neovim.mode != cmdline || neovim.wildMenuVisible)"
            },
            {
                "key": "ctrl+n",
                "command": "selectNextCodeAction",
                "when": "codeActionMenuVisible"
            },
            {
                "key": "ctrl+p",
                "command": "selectPrevCodeAction",
                "when": "codeActionMenuVisible"
            },
            {
                "key": "ctrl+w q",
                "command": "workbench.action.closeActiveEditor",
                "when": "!editorTextFocus && !terminalFocus && !filesExplorerFocus && !searchViewletFocus"
            },
            {
                "key": "ctrl+Escape",
                "command": "workbench.action.focusActiveEditorGroup",
                "when": "terminalFocus"
            },
            {
                "key": "ctrl+w",
                "command": "-workbench.action.switchWindow"
            },
            {
                "key": "ctrl+w ctrl+w",
                "command": "workbench.action.focusNextGroup",
                "when": "!editorTextFocus && !terminalFocus && !(filesExplorerFocus || inSearchEditor || searchViewletFocus || replaceInputBoxFocus)"
            },
            {
                "key": "ctrl+w ctrl+w",
                "command": "workbench.action.focusFirstEditorGroup",
                "when": "!editorTextFocus && !terminalFocus && !(filesExplorerFocus || inSearchEditor || searchViewletFocus || replaceInputBoxFocus)"
            },
            {
                "key": "ctrl+w up",
                "command": "workbench.action.navigateUp",
                "when": "!editorTextFocus && !terminalFocus"
            },
            {
                "key": "ctrl+w k",
                "command": "workbench.action.navigateUp",
                "when": "!editorTextFocus && !terminalFocus"
            },
            {
                "key": "ctrl+w down",
                "command": "workbench.action.navigateDown",
                "when": "!editorTextFocus && !terminalFocus"
            },
            {
                "key": "ctrl+w j",
                "command": "workbench.action.navigateDown",
                "when": "!editorTextFocus && !terminalFocus"
            },
            {
                "key": "ctrl+w left",
                "command": "workbench.action.navigateLeft",
                "when": "!editorTextFocus && !terminalFocus"
            },
            {
                "key": "ctrl+w h",
                "command": "workbench.action.navigateLeft",
                "when": "!editorTextFocus && !terminalFocus"
            },
            {
                "key": "ctrl+w right",
                "command": "workbench.action.navigateRight",
                "when": "!editorTextFocus && !terminalFocus"
            },
            {
                "key": "ctrl+w l",
                "command": "workbench.action.navigateRight",
                "when": "!editorTextFocus && !terminalFocus"
            }
        ]
    },
    "scripts": {
        "lint": "eslint --ext .ts src",
        "format": "prettier --ignore-path .gitignore --ignore-path .prettierignore --write .",
        "keybind": "node ./scripts/keybindings/index.cjs && prettier --write ./package.json",
        "test": "node ./out/test/runTest.js",
        "pretest": "npm run test-compile",
        "vscode:prepublish": "webpack --mode production",
        "webpack": "webpack --mode development",
        "webpack-dev": "webpack --mode development --watch",
        "test-compile": "tsc -p ./",
        "prepare": "husky install"
    },
    "devDependencies": {
        "@types/glob": "^7.1.3",
        "@types/lodash-es": "^4.17.9",
        "@types/mocha": "^10.0.2",
        "@types/msgpack-lite": "^0.1.9",
        "@types/node": "^20.8.7",
        "@types/vscode": "^1.83.1",
        "@typescript-eslint/eslint-plugin": "^5.61.0",
        "@typescript-eslint/parser": "^5.62.0",
        "@vscode/test-electron": "^2.3.5",
        "eslint": "^8.52.0",
        "eslint-config-prettier": "^9.0.0",
        "eslint-plugin-import": "^2.28.1",
        "eslint-plugin-prettier": "^5.0.1",
        "glob": "^8.0.3",
        "husky": "^8.0.3",
        "mocha": "^10.2.0",
        "prettier": "^3.0.3",
        "source-map-support": "^0.5.19",
        "ts-loader": "^9.5.0",
        "typescript": "^5.2.2",
        "vsce": "^2.15.0",
        "webpack": "^5.89.0",
        "webpack-cli": "^5.1.4"
    },
    "dependencies": {
        "async-mutex": "^0.4.0",
        "fast-diff": "^1.3.0",
        "grapheme-splitter": "^1.0.4",
        "lodash-es": "^4.17.21",
        "neovim": "^4.9.0",
        "ts-wcwidth": "^2.0.3"
    }
}
